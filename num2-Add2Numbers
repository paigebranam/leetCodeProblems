/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
       
        ListNode dummyHead = new ListNode(0);
        //initialize new linked list l3 using dummyHead
        ListNode l3 = dummyHead;
        int carry = 0;
            
        //create while loop that will execute while list l1 OR l2 are not null
        //OR allows list to have uneven values. l1 could have 5 nums and l2 could have 3
        while(l1 != null || l2 != null){
            //if there's no value to extract, use zero
            int l1_value = (l1 != null) ? l1.val : 0;
            int l2_value = (l2 != null) ? l2.val : 0;
            
            //calculate current sum
            int currentSum = l1_value + l2_value + carry;
            carry = currentSum / 10;
            int lastDigit = currentSum % 10;
            
            ListNode newNode = new ListNode(lastDigit);
            l3.next = newNode;
            
            if(l1 != null) l1 = l1.next;
            if(l2 != null) l2 = l2.next;
            l3 = l3.next;
            
            
        }
        if(carry > 0){
            ListNode newNode = new ListNode(carry);
            l3.next = newNode;
            l3 = l3.next;
            
        }
        return dummyHead.next;
    }
}
